#encoding utf-8
from graphviz import Digraph

dg = Digraph(format='png')
dg.attr('graph',rankdir="TB")
dg.attr('node', shape='box', fontname='noto')

# 6問体制緑を埋めよう
# 126~130やった

print("描画中")

dg.edge("入力が配列","大量(10^5以上)の書き換え操作がある")
dg.edge("大量(10^5以上)の書き換え操作がある","操作対象は任意 (0枚でもよい)")
dg.edge("操作対象は任意 (0枚でもよい)","合計の最大値")
dg.edge("合計の最大値","書き換えられる最大値を上からN枚追加(書き換えでなく)しソート,上からN枚取る(127D)")

dg.edge("入力がいくつかの整数","制約が20以下")
dg.edge("制約が20以下","ONとOFFの状態がある")
dg.edge("ONとOFFの状態がある","bit全探索(128C)")


dg.edge("入力がH,Wのグリッド","壁がある")
dg.edge("壁がある","点を指定し上下左右に伸びる何かがある(明かりなど)")
dg.edge("点を指定し上下左右に伸びる何かがある(明かりなど)","点を一つ指定し上下左右のマス数を最大化")
dg.edge("点を一つ指定し上下左右のマス数を最大化","前計算で各場所について伸びる横マス数、伸びる縦マス数を計算して 横+ 縦-1 (左寄せ、上寄せUnionFindを行、列ごとに用意すると楽かも？) (129D)")

dg.edge("入力が整数列一つ与えられる","正の整数列")
dg.edge("正の整数列","任意の長さの連続する部分列")
dg.edge("任意の長さの連続する部分列","K以上のものの個数")
dg.edge("K以上のものの個数","K以上の区間を持つ尺取り法 validな場合の左x(N-右)みたいな(130D)")

dg.render(filename='/out/char', format='png')